# Generated by CodiumAI

import time
import pytest
from utilities import Utils


class TestUtilsElapsedTimer:

    # The context manager starts a timer when the code block is entered.
    def test_starts_timer_when_entered(self):
        with Utils().elapsed_timer() as timer:
            time.sleep(2)
            elapsed_time = timer()
            assert elapsed_time > 0

    # The context manager stops the timer when the code block is exited.
    def test_stops_timer_when_exited(self):
        with Utils().elapsed_timer() as timer:
            time.sleep(2)
        elapsed_time = timer()
        assert int(elapsed_time) == 2

    # The elapsed time can be obtained by calling the returned function.
    def test_elapsed_time_can_be_obtained(self):
        with Utils().elapsed_timer() as timer:
            time.sleep(2)
            elapsed_time = timer()
        assert int(elapsed_time) > 0

    # The context manager works correctly when the code block raises an exception.
    def test_works_correctly_with_exception(self):
        with pytest.raises(Exception):
            with Utils().elapsed_timer() as timer:
                time.sleep(2)
                raise Exception("Test exception")
        elapsed_time = timer()
        assert int(elapsed_time) == 2

    # The context manager works correctly when the code block contains a return statement.
    def test_works_correctly_with_return_statement(self):
        with Utils().elapsed_timer() as timer:
            time.sleep(2)
            return
        elapsed_time = timer()
        assert elapsed_time == 0

    # The context manager works correctly when the code block contains a continue statement.
    def test_works_correctly_with_continue_statement(self):
        with Utils().elapsed_timer() as timer:
            for i in range(5):
                if i == 2:
                    continue
                time.sleep(1)
        elapsed_time = timer()
        assert int(elapsed_time) == 4
