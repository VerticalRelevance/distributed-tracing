# Generated by CodiumAI

import os
import pytest
from utilities import Utils


class TestUtilsLoadFile:
    # Loads the content of a file and returns it as a string when given a valid file path.
    def test_valid_file_path(self, tmp_path):
        # Assemble
        utils = Utils()
        file_content = "This is the content of the file."
        file_path = tmp_path / "test_file.txt"
        file_path.write_text(file_content)

        # Act
        result = utils.load_file(str(file_path))

        # Assert
        assert result == file_content

        # Cleanup
        os.remove(file_path)

    # Returns an empty string when given an empty file.
    def test_empty_file(self, tmp_path):
        # Assemble
        utils = Utils()
        file_path = tmp_path / "test_file.txt"
        file_path.touch()

        # Act
        result = utils.load_file(str(file_path))

        # Assert
        assert result == ""

        # Cleanup
        os.remove(file_path)

    # Returns an empty string when given a file with no content.
    def test_file_with_no_content(self, tmp_path):
        # Assemble
        utils = Utils()
        file_content = ""
        file_path = tmp_path / "test_file.txt"
        file_path.write_text(file_content)

        # Act
        result = utils.load_file(str(file_path))

        # Assert
        assert result == ""

        # Cleanup
        os.remove(file_path)

    # Raises a FileNotFoundError when given a non-existent file path.
    def test_nonexistent_file_path(self):
        # Assemble
        utils = Utils()
        file_path = "nonexistent_file.txt"

        # Act
        with pytest.raises(FileNotFoundError) as exc_info:
            utils.load_file(file_path)

        # Assert
        assert (
            str(exc_info.value) == f"[Errno 2] No such file or directory: '{file_path}'"
        )

    # Raises a PermissionError when given a file path without read permissions.
    def test_file_without_read_permissions(self, tmp_path):
        # Assemble
        utils = Utils()
        file_content = "This is the content of the file."
        file_path = tmp_path / "test_file.txt"
        file_path.write_text(file_content)
        os.chmod(str(file_path), 0o222)  # Remove read permissions

        # Act
        with pytest.raises(PermissionError) as exc_info:
            utils.load_file(str(file_path))

        # Assert
        assert str(exc_info.value) == f"[Errno 13] Permission denied: '{file_path}'"

        # Cleanup
        os.remove(file_path)

    # Raises a TypeError when given a file path that is not a string.
    def test_non_string_file_path(self):
        # Assemble
        utils = Utils()
        file_path = 123

        # Act
        with pytest.raises(OSError) as exc_info:
            utils.load_file(file_path)

        # Assert
        assert str(exc_info.value) == "[Errno 9] Bad file descriptor"
