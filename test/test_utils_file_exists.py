# Generated by CodiumAI
import os
import pytest
from utilities import Utils


class TestUtilsFileExists:

    # Returns True if the file at absolute path does not exist.
    def test_absolute_path_exists_true(self):
        # Create an instance of the Utils class
        utils = Utils()

        # Create a file to test for
        absolute_path = "/tmp/test_exists.txt"
        with open(absolute_path, "w", encoding="utf-8") as f:
            f.write("test exists")

        exists = utils.file_exists(absolute_path)
        assert exists is True

        os.remove(absolute_path)

    # Returns False if the file at absolute path does not exist.
    def test_absolute_path_exists_false(self):
        # Assemble
        utils = Utils()
        absolute_path = "/tmp/test_not_exists.txt"

        # Act
        exists = utils.file_exists(absolute_path)

        # Assert
        assert exists is False

    # Returns True if the file at relative path exist.
    def test_relative_path_exists(self):
        # Assemble
        utils = Utils()
        relative_directory = "utilities_test_path"
        relative_path = f"{relative_directory}/test_exists.txt"
        if os.path.isfile(relative_path):
            os.remove(relative_path)
        if os.path.isdir(relative_directory):
            os.rmdir(relative_directory)
        os.makedirs(relative_directory, exist_ok=False)

        with open(relative_path, "w", encoding="utf-8") as f:
            f.write("test exists")

        # Act
        exists = utils.file_exists(relative_path)

        # Assert
        assert exists is True

        # Cleanup
        os.remove(relative_path)
        os.rmdir(relative_directory)

    # Returns True if the file at relative path does not exist.
    def test_relative_path_not_exists(self):
        # Create an instance of the Utils class
        utils = Utils()

        # Specify a relative file path
        relative_directory = "utilities_test_path"
        os.makedirs(relative_directory, exist_ok=False)

        relative_path = f"{relative_directory}/test_exists.txt"
        # Invoke the file_exists method for the relative path
        exists = utils.file_exists(relative_path)

        # Assert that both paths exist
        assert exists is False

        os.rmdir(relative_directory)

    # Returns False if the input path is None.
    def test_file_exists_none_path(self):
        # Create an instance of the Utils class
        utils = Utils()

        # Specify a None path
        file_path = None

        with pytest.raises(TypeError) as exc_info:
            __ = utils.file_exists(file_path)

        assert (
            str(exc_info.value)
            == "stat: path should be string, bytes, os.PathLike or integer, not NoneType"
        )

    # Returns False if the input path is an empty string.
    def test_file_exists_empty_path(self):
        # Create an instance of the Utils class
        utils = Utils()

        # Specify an empty string path
        file_path = ""

        # Invoke the file_exists method
        exists = utils.file_exists(file_path)

        # Assert that the file does not exist
        assert exists is False

    # Returns False if the input path is not a string.
    def test_file_exists_non_string_path(self):
        # Create an instance of the Utils class
        utils = Utils()

        # Specify a non-string path
        file_path = []

        # Invoke the file_exists method
        with pytest.raises(TypeError) as exc_info:
            __ = utils.file_exists(file_path)

        assert (
            str(exc_info.value)
            == "stat: path should be string, bytes, os.PathLike or integer, not list"
        )

    # Raises a ValueError if the input path is not a file.
    def test_file_exists_not_a_file(self, tmp_path):
        # Arrange
        utils = Utils()
        directory = tmp_path

        # Act
        with pytest.raises(ValueError) as exc_info:
            utils.file_exists(directory)

        # Assert
        assert str(exc_info.value) == f"Path '{directory}' is not a file."
